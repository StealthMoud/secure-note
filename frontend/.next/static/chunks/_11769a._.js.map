{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///app/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.NEXT_PUBLIC_BACKEND_URL;\n\nexport const api = axios.create({\n    baseURL: `${API_URL}/api`,\n    timeout: 5000,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\nexport default api;\n\n"],"names":[],"mappings":";;;;AAEgB;AAFhB;;AAEA,MAAM;AAEC,MAAM,MAAM,wIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IAC5B,SAAS,GAAG,QAAQ,IAAI,CAAC;IACzB,SAAS;IACT,SAAS;QACL,gBAAgB;IACpB;AACJ;uCAEe"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":["file:///app/src/services/auth.ts"],"sourcesContent":["import api from './api';\n\ninterface User {\n    _id: string;\n    username: string;\n    email: string;\n    role: string;\n}\n\ninterface LoginResponse {\n    token: string;\n    user: User;\n}\n\ninterface RegisterResponse {\n    message: string;\n}\n\ninterface UserResponse {\n    user: User;\n    role: string;\n}\n\ninterface VerifyEmailResponse {\n    message: string;\n}\n\n\nexport const registerUser = async (\n    username: string,\n    email: string,\n    password: string,\n    confirmPassword: string\n): Promise<RegisterResponse> => {\n    try {\n        const response = await api.post<RegisterResponse>('/auth/register', {\n            username,\n            email,\n            password,\n            confirmPassword,\n        });\n        return response.data;\n    } catch (error: any) {\n        if (error.response?.data?.errors) {\n            const fieldErrors: Record<string, string> = {};\n            error.response.data.errors.forEach((err: any) => {\n                fieldErrors[err.path || err.param] = err.msg;\n            });\n            throw { fieldErrors };\n        }\n        throw new Error(error.response?.data?.error || 'Registration failed');\n    }\n};\n\n\n\nexport const loginUser = async (identifier: string, password: string): Promise<LoginResponse> => {\n    try {\n        const response = await api.post<LoginResponse>('/auth/login', {identifier, password});\n        return response.data;\n    } catch (error: any) {\n        if (error.response?.data?.errors) {\n            const fieldErrors: Record<string, string> = {};\n            error.response.data.errors.forEach((err: any) => {\n                fieldErrors[err.path || err.param] = err.msg;\n            });\n            throw { fieldErrors };\n        }\n        throw new Error(error.response?.data?.error || 'Login failed');\n    }\n};\n\nexport const initiateOAuthLogin = async (provider: 'google' | 'github'): Promise<void> => {\n    // Since this is a redirect, we donâ€™t need to handle the response here\n    // The browser will handle the redirect to the backend OAuth endpoint\n    window.location.href = `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/auth/${provider}`;\n};\n\n\n\n\n    export const requestPasswordReset = async (email: string): Promise<{ message: string }> => {\n    try {\n        const response = await api.post<{ message: string }>('/auth/request-password-reset', { email });\n        return response.data;\n    } catch (error: any) {\n        if (error.response?.data?.errors) {\n            const fieldErrors: Record<string, string> = {};\n            error.response.data.errors.forEach((err: any) => {\n                fieldErrors[err.path || err.param] = err.msg;\n            });\n            throw { fieldErrors };\n        }\n        throw new Error(error.response?.data?.error || 'Failed to request password reset');\n    }\n};\n\nexport const resetPassword = async (token: string, newPassword: string): Promise<{ message: string }> => {\n    try {\n        const response = await api.post<{ message: string }>('/auth/reset-password', { token, newPassword });\n        return response.data;\n    } catch (error: any) {\n        if (error.response?.data?.errors) {\n            const fieldErrors: Record<string, string> = {};\n            error.response.data.errors.forEach((err: any) => {\n                fieldErrors[err.path || err.param] = err.msg;\n            });\n            throw { fieldErrors };\n        }\n        throw new Error(error.response?.data?.error || 'Failed to reset password');\n    }\n};\n\n// Verify Email\nexport const verifyEmail = async (token: string): Promise<VerifyEmailResponse> => {\n    try {\n        const response = await api.get<VerifyEmailResponse>(`/auth/verify-email?token=${token}`);\n        return response.data; // Typed as VerifyEmailResponse\n    } catch (error: any) {\n        throw new Error(error.response?.data?.error || 'Email verification failed');\n    }\n};\n\n// Get Current User\nexport const getCurrentUser = async (token: string): Promise<UserResponse> => {\n    try {\n        const response = await api.get<UserResponse>('/users/me', {\n            headers: {Authorization: `Bearer ${token}`},\n        });\n        return response.data;\n    } catch (error: any) {\n        throw new Error(error.response?.data?.error || 'Failed to fetch user');\n    }\n};\n\nexport const requestVerification = async (): Promise<{ message: string }> => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await api.post<{ message: string }>('/auth/request-verification', {}, {\n            headers: {Authorization: `Bearer ${token}`},\n        });\n        return response.data;\n    } catch (error: any) {\n        throw new Error(error.response?.data?.error || 'Failed to request verification');\n    }\n};\n\nexport const approveVerification = async (userId: string): Promise<{ message: string }> => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await api.post<{ message: string }>('/auth/approve-verification', {userId}, {\n            headers: {Authorization: `Bearer ${token}`},\n        });\n        return response.data;\n    } catch (error: any) {\n        throw new Error(error.response?.data?.error || 'Failed to approve verification');\n    }\n};"],"names":[],"mappings":"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"}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///app/app/admin/verify/page.tsx"],"sourcesContent":["'use client';\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { getCurrentUser, approveVerification } from '@/services/auth';\nimport api from '@/services/api'; // Import Axios instance\n\ninterface User {\n    _id: string;\n    username: string;\n    email: string;\n    role: string;\n    verified?: boolean;\n    verificationPending?: boolean;\n}\n\nexport default function AdminVerifyPage() {\n    const [users, setUsers] = useState<User[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [message, setMessage] = useState<string>('');\n    const [error, setError] = useState<string>('');\n    const router = useRouter();\n\n    useEffect(() => {\n        const fetchUsers = async () => {\n            const token = localStorage.getItem('token');\n            if (!token) {\n                router.push('/login');\n                return;\n            }\n            try {\n                const userData = await getCurrentUser(token);\n                if (userData.role !== 'admin') {\n                    router.push('/dashboard');\n                    return;\n                }\n\n                const response = await api.get<User[]>('/auth/users/pending', {\n                    headers: { Authorization: `Bearer ${token}` },\n                });\n                console.log('Pending users:', response.data); // Debug log\n                setUsers(Array.isArray(response.data) ? response.data : []);\n            } catch (err: any) {\n                console.error('Fetch users error:', err);\n                setError(err.response?.data?.error || 'Failed to load pending verifications');\n                setUsers([]); // Fallback to empty array\n            }\n            setLoading(false);\n        };\n        fetchUsers();\n    }, [router]);\n\n    const handleApprove = async (userId: string) => {\n        try {\n            const data = await approveVerification(userId);\n            setMessage(data.message);\n            setUsers(users.filter((u) => u._id !== userId));\n        } catch (err: any) {\n            setError(err.message);\n        }\n    };\n\n    if (loading) return <div className=\"text-center mt-10\">Loading...</div>;\n\n    return (\n        <div className=\"container mx-auto p-4 max-w-4xl\">\n            <h1 className=\"text-2xl font-bold mb-4\">Admin - Verify Users</h1>\n            {message && <p className=\"text-green-500 mb-4\">{message}</p>}\n            {error && <p className=\"text-red-500 mb-4\">{error}</p>}\n            {users.length === 0 ? (\n                <p>No pending verification requests.</p>\n            ) : (\n                <ul className=\"space-y-4\">\n                    {users.map((user) => (\n                        <li key={user._id} className=\"border p-4 rounded flex justify-between items-center\">\n                            <div>\n                                <p><strong>Username:</strong> {user.username}</p>\n                                <p><strong>Email:</strong> {user.email}</p>\n                            </div>\n                            <button\n                                onClick={() => handleApprove(user._id)}\n                                className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\"\n                            >\n                                Approve\n                            </button>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </div>\n    );\n}"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA,iNAAkC,wBAAwB;;;AAJ1D;;;;;AAee,SAAS;;IACpB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU,EAAE;IAC7C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU;IAC/C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU;IAC3C,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;qCAAE;YACN,MAAM;wDAAa;oBACf,MAAM,QAAQ,aAAa,OAAO,CAAC;oBACnC,IAAI,CAAC,OAAO;wBACR,OAAO,IAAI,CAAC;wBACZ;oBACJ;oBACA,IAAI;wBACA,MAAM,WAAW,MAAM,CAAA,GAAA,0HAAA,CAAA,iBAAc,AAAD,EAAE;wBACtC,IAAI,SAAS,IAAI,KAAK,SAAS;4BAC3B,OAAO,IAAI,CAAC;4BACZ;wBACJ;wBAEA,MAAM,WAAW,MAAM,yHAAA,CAAA,UAAG,CAAC,GAAG,CAAS,uBAAuB;4BAC1D,SAAS;gCAAE,eAAe,CAAC,OAAO,EAAE,OAAO;4BAAC;wBAChD;wBACA,QAAQ,GAAG,CAAC,kBAAkB,SAAS,IAAI,GAAG,YAAY;wBAC1D,SAAS,MAAM,OAAO,CAAC,SAAS,IAAI,IAAI,SAAS,IAAI,GAAG,EAAE;oBAC9D,EAAE,OAAO,KAAU;wBACf,QAAQ,KAAK,CAAC,sBAAsB;wBACpC,SAAS,IAAI,QAAQ,EAAE,MAAM,SAAS;wBACtC,SAAS,EAAE,GAAG,0BAA0B;oBAC5C;oBACA,WAAW;gBACf;;YACA;QACJ;oCAAG;QAAC;KAAO;IAEX,MAAM,gBAAgB,OAAO;QACzB,IAAI;YACA,MAAM,OAAO,MAAM,CAAA,GAAA,0HAAA,CAAA,sBAAmB,AAAD,EAAE;YACvC,WAAW,KAAK,OAAO;YACvB,SAAS,MAAM,MAAM,CAAC,CAAC,IAAM,EAAE,GAAG,KAAK;QAC3C,EAAE,OAAO,KAAU;YACf,SAAS,IAAI,OAAO;QACxB;IACJ;IAEA,IAAI,SAAS,qBAAO,6LAAC;QAAI,WAAU;kBAAoB;;;;;;IAEvD,qBACI,6LAAC;QAAI,WAAU;;0BACX,6LAAC;gBAAG,WAAU;0BAA0B;;;;;;YACvC,yBAAW,6LAAC;gBAAE,WAAU;0BAAuB;;;;;;YAC/C,uBAAS,6LAAC;gBAAE,WAAU;0BAAqB;;;;;;YAC3C,MAAM,MAAM,KAAK,kBACd,6LAAC;0BAAE;;;;;qCAEH,6LAAC;gBAAG,WAAU;0BACT,MAAM,GAAG,CAAC,CAAC,qBACR,6LAAC;wBAAkB,WAAU;;0CACzB,6LAAC;;kDACG,6LAAC;;0DAAE,6LAAC;0DAAO;;;;;;4CAAkB;4CAAE,KAAK,QAAQ;;;;;;;kDAC5C,6LAAC;;0DAAE,6LAAC;0DAAO;;;;;;4CAAe;4CAAE,KAAK,KAAK;;;;;;;;;;;;;0CAE1C,6LAAC;gCACG,SAAS,IAAM,cAAc,KAAK,GAAG;gCACrC,WAAU;0CACb;;;;;;;uBARI,KAAK,GAAG;;;;;;;;;;;;;;;;AAiBzC;GA3EwB;;QAKL,qIAAA,CAAA,YAAS;;;KALJ"}},
    {"offset": {"line": 381, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}