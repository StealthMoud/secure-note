{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///app/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.NEXT_PUBLIC_BACKEND_URL;\n\nexport const api = axios.create({\n    baseURL: `${API_URL}/api`, // Proxy rewrites /api to backend\n    timeout: 5000,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// No specific functions hereâ€”keep it generic\nexport default api;"],"names":[],"mappings":";;;;AAEgB;AAFhB;;AAEA,MAAM;AAEC,MAAM,MAAM,wIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IAC5B,SAAS,GAAG,QAAQ,IAAI,CAAC;IACzB,SAAS;IACT,SAAS;QACL,gBAAgB;IACpB;AACJ;uCAGe"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":["file:///app/src/services/auth.ts"],"sourcesContent":["import api from './api';\n\n// Define response types\ninterface User {\n    _id: string;\n    username: string;\n    email: string;\n    role: string;\n}\n\ninterface LoginResponse {\n    token: string;\n    user: User;\n}\n\ninterface RegisterResponse {\n    message: string;\n}\n\ninterface UserResponse {\n    user: User;\n    role: string;\n}\n\ninterface VerifyEmailResponse {\n    message: string;\n}\n\n// Register User\nexport const registerUser = async (\n    username: string,\n    email: string,\n    password: string,\n    confirmPassword: string\n): Promise<RegisterResponse> => {\n    try {\n        const response = await api.post<RegisterResponse>('/auth/register', {\n            username,\n            email,\n            password,\n            confirmPassword,\n        });\n        return response.data;\n    } catch (error: any) {\n        throw new Error(error.response?.data?.error || 'Registration failed');\n    }\n};\n\n// Login User\nexport const loginUser = async (identifier: string, password: string): Promise<LoginResponse> => {\n    try {\n        const response = await api.post<LoginResponse>('/auth/login', { identifier, password });\n        return response.data;\n    } catch (error: any) {\n        throw new Error(error.response?.data?.error || 'Login failed');\n    }\n};\n\n// Verify Email\nexport const verifyEmail = async (token: string): Promise<VerifyEmailResponse> => {\n    try {\n        const response = await api.get<VerifyEmailResponse>(`/auth/verify-email?token=${token}`);\n        return response.data; // Typed as VerifyEmailResponse\n    } catch (error: any) {\n        throw new Error(error.response?.data?.error || 'Email verification failed');\n    }\n};\n\n// Get Current User\nexport const getCurrentUser = async (token: string): Promise<UserResponse> => {\n    try {\n        const response = await api.get<UserResponse>('/auth/me', {\n            headers: { Authorization: `Bearer ${token}` },\n        });\n        return response.data;\n    } catch (error: any) {\n        throw new Error(error.response?.data?.error || 'Failed to fetch user');\n    }\n};\n\nexport const requestVerification = async (): Promise<{ message: string }> => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await api.post<{ message: string }>('/auth/request-verification', {}, {\n            headers: { Authorization: `Bearer ${token}` },\n        });\n        return response.data;\n    } catch (error: any) {\n        throw new Error(error.response?.data?.error || 'Failed to request verification');\n    }\n};\n\nexport const approveVerification = async (userId: string): Promise<{ message: string }> => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await api.post<{ message: string }>('/auth/approve-verification', { userId }, {\n            headers: { Authorization: `Bearer ${token}` },\n        });\n        return response.data;\n    } catch (error: any) {\n        throw new Error(error.response?.data?.error || 'Failed to approve verification');\n    }\n};"],"names":[],"mappings":";;;;;;;;AAAA;;AA6BO,MAAM,eAAe,OACxB,UACA,OACA,UACA;IAEA,IAAI;QACA,MAAM,WAAW,MAAM,yHAAA,CAAA,UAAG,CAAC,IAAI,CAAmB,kBAAkB;YAChE;YACA;YACA;YACA;QACJ;QACA,OAAO,SAAS,IAAI;IACxB,EAAE,OAAO,OAAY;QACjB,MAAM,IAAI,MAAM,MAAM,QAAQ,EAAE,MAAM,SAAS;IACnD;AACJ;AAGO,MAAM,YAAY,OAAO,YAAoB;IAChD,IAAI;QACA,MAAM,WAAW,MAAM,yHAAA,CAAA,UAAG,CAAC,IAAI,CAAgB,eAAe;YAAE;YAAY;QAAS;QACrF,OAAO,SAAS,IAAI;IACxB,EAAE,OAAO,OAAY;QACjB,MAAM,IAAI,MAAM,MAAM,QAAQ,EAAE,MAAM,SAAS;IACnD;AACJ;AAGO,MAAM,cAAc,OAAO;IAC9B,IAAI;QACA,MAAM,WAAW,MAAM,yHAAA,CAAA,UAAG,CAAC,GAAG,CAAsB,CAAC,yBAAyB,EAAE,OAAO;QACvF,OAAO,SAAS,IAAI,EAAE,+BAA+B;IACzD,EAAE,OAAO,OAAY;QACjB,MAAM,IAAI,MAAM,MAAM,QAAQ,EAAE,MAAM,SAAS;IACnD;AACJ;AAGO,MAAM,iBAAiB,OAAO;IACjC,IAAI;QACA,MAAM,WAAW,MAAM,yHAAA,CAAA,UAAG,CAAC,GAAG,CAAe,YAAY;YACrD,SAAS;gBAAE,eAAe,CAAC,OAAO,EAAE,OAAO;YAAC;QAChD;QACA,OAAO,SAAS,IAAI;IACxB,EAAE,OAAO,OAAY;QACjB,MAAM,IAAI,MAAM,MAAM,QAAQ,EAAE,MAAM,SAAS;IACnD;AACJ;AAEO,MAAM,sBAAsB;IAC/B,IAAI;QACA,MAAM,QAAQ,aAAa,OAAO,CAAC;QACnC,MAAM,WAAW,MAAM,yHAAA,CAAA,UAAG,CAAC,IAAI,CAAsB,8BAA8B,CAAC,GAAG;YACnF,SAAS;gBAAE,eAAe,CAAC,OAAO,EAAE,OAAO;YAAC;QAChD;QACA,OAAO,SAAS,IAAI;IACxB,EAAE,OAAO,OAAY;QACjB,MAAM,IAAI,MAAM,MAAM,QAAQ,EAAE,MAAM,SAAS;IACnD;AACJ;AAEO,MAAM,sBAAsB,OAAO;IACtC,IAAI;QACA,MAAM,QAAQ,aAAa,OAAO,CAAC;QACnC,MAAM,WAAW,MAAM,yHAAA,CAAA,UAAG,CAAC,IAAI,CAAsB,8BAA8B;YAAE;QAAO,GAAG;YAC3F,SAAS;gBAAE,eAAe,CAAC,OAAO,EAAE,OAAO;YAAC;QAChD;QACA,OAAO,SAAS,IAAI;IACxB,EAAE,OAAO,OAAY;QACjB,MAAM,IAAI,MAAM,MAAM,QAAQ,EAAE,MAAM,SAAS;IACnD;AACJ"}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///app/app/verify-email/page.tsx"],"sourcesContent":["'use client';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport { verifyEmail } from '@/services/auth';\n\nexport default function VerifyEmailPage() {\n    const [message, setMessage] = useState<string>('');\n    const [error, setError] = useState<string>('');\n    const searchParams = useSearchParams();\n\n    useEffect(() => {\n        const verify = async () => {\n            const token = searchParams.get('token');\n            console.log('Token from URL:', token);\n            if (!token) {\n                setError('No verification token provided.');\n                return;\n            }\n\n            try {\n                console.log('Calling verifyEmail with token:', token);\n                const data = await verifyEmail(token);\n                console.log('verifyEmail response:', data);\n                setMessage(data.message);\n            } catch (err: any) {\n                console.error('Verification error:', err.message, err.response?.data, err);\n                setError(err.response?.data?.error || err.message || 'Failed to verify email');\n            }\n        };\n        verify();\n    }, [searchParams]);\n\n    return (\n        <div className=\"container mx-auto p-4 max-w-md\">\n            <h1 className=\"text-2xl font-bold mb-4\">Verify Email</h1>\n            {message && <p className=\"text-green-500 text-sm mb-4\">{message}</p>}\n            {error && <p className=\"text-red-500 text-sm mb-4\">{error}</p>}\n            {!message && !error && <p className=\"text-gray-500\">Verifying your email...</p>}\n            {message && (\n                <a href=\"/login\" className=\"text-blue-500 hover:underline\">Go to Login</a>\n            )}\n        </div>\n    );\n}"],"names":[],"mappings":";;;;AACA;AACA;AACA;;;AAHA;;;;AAKe,SAAS;;IACpB,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU;IAC/C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU;IAC3C,MAAM,eAAe,CAAA,GAAA,qIAAA,CAAA,kBAAe,AAAD;IAEnC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;qCAAE;YACN,MAAM;oDAAS;oBACX,MAAM,QAAQ,aAAa,GAAG,CAAC;oBAC/B,QAAQ,GAAG,CAAC,mBAAmB;oBAC/B,IAAI,CAAC,OAAO;wBACR,SAAS;wBACT;oBACJ;oBAEA,IAAI;wBACA,QAAQ,GAAG,CAAC,mCAAmC;wBAC/C,MAAM,OAAO,MAAM,CAAA,GAAA,0HAAA,CAAA,cAAW,AAAD,EAAE;wBAC/B,QAAQ,GAAG,CAAC,yBAAyB;wBACrC,WAAW,KAAK,OAAO;oBAC3B,EAAE,OAAO,KAAU;wBACf,QAAQ,KAAK,CAAC,uBAAuB,IAAI,OAAO,EAAE,IAAI,QAAQ,EAAE,MAAM;wBACtE,SAAS,IAAI,QAAQ,EAAE,MAAM,SAAS,IAAI,OAAO,IAAI;oBACzD;gBACJ;;YACA;QACJ;oCAAG;QAAC;KAAa;IAEjB,qBACI,6LAAC;QAAI,WAAU;;0BACX,6LAAC;gBAAG,WAAU;0BAA0B;;;;;;YACvC,yBAAW,6LAAC;gBAAE,WAAU;0BAA+B;;;;;;YACvD,uBAAS,6LAAC;gBAAE,WAAU;0BAA6B;;;;;;YACnD,CAAC,WAAW,CAAC,uBAAS,6LAAC;gBAAE,WAAU;0BAAgB;;;;;;YACnD,yBACG,6LAAC;gBAAE,MAAK;gBAAS,WAAU;0BAAgC;;;;;;;;;;;;AAI3E;GAtCwB;;QAGC,qIAAA,CAAA,kBAAe;;;KAHhB"}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}