{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///app/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.NEXT_PUBLIC_BACKEND_URL;\n\nexport const api = axios.create({\n    baseURL: `${API_URL}/api`,\n    timeout: 5000,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\nexport default api;\n\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM;AAEC,MAAM,MAAM,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IAC5B,SAAS,GAAG,QAAQ,IAAI,CAAC;IACzB,SAAS;IACT,SAAS;QACL,gBAAgB;IACpB;AACJ;uCAEe"}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///app/src/services/auth.ts"],"sourcesContent":["import api from './api';\n\ninterface User {\n    _id: string;\n    username: string;\n    email: string;\n    role: string;\n}\n\ninterface LoginResponse {\n    token: string;\n    user: User;\n}\n\ninterface RegisterResponse {\n    message: string;\n}\n\ninterface UserResponse {\n    user: User;\n    role: string;\n}\n\ninterface VerifyEmailResponse {\n    message: string;\n}\n\n\nexport const registerUser = async (\n    username: string,\n    email: string,\n    password: string,\n    confirmPassword: string\n): Promise<RegisterResponse> => {\n    try {\n        const response = await api.post<RegisterResponse>('/auth/register', {\n            username,\n            email,\n            password,\n            confirmPassword,\n        });\n        return response.data;\n    } catch (error: any) {\n        if (error.response?.data?.errors) {\n            const fieldErrors: Record<string, string> = {};\n            error.response.data.errors.forEach((err: any) => {\n                fieldErrors[err.path || err.param] = err.msg;\n            });\n            throw { fieldErrors };\n        }\n        throw new Error(error.response?.data?.error || 'Registration failed');\n    }\n};\n\n\n\nexport const loginUser = async (identifier: string, password: string): Promise<LoginResponse> => {\n    try {\n        const response = await api.post<LoginResponse>('/auth/login', {identifier, password});\n        return response.data;\n    } catch (error: any) {\n        if (error.response?.data?.errors) {\n            const fieldErrors: Record<string, string> = {};\n            error.response.data.errors.forEach((err: any) => {\n                fieldErrors[err.path || err.param] = err.msg;\n            });\n            throw { fieldErrors };\n        }\n        throw new Error(error.response?.data?.error || 'Login failed');\n    }\n};\n\nexport const initiateOAuthLogin = async (provider: 'google' | 'github'): Promise<void> => {\n    // Since this is a redirect, we donâ€™t need to handle the response here\n    // The browser will handle the redirect to the backend OAuth endpoint\n    window.location.href = `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/auth/${provider}`;\n};\n\n\n\n\n    export const requestPasswordReset = async (email: string): Promise<{ message: string }> => {\n    try {\n        const response = await api.post<{ message: string }>('/auth/request-password-reset', { email });\n        return response.data;\n    } catch (error: any) {\n        if (error.response?.data?.errors) {\n            const fieldErrors: Record<string, string> = {};\n            error.response.data.errors.forEach((err: any) => {\n                fieldErrors[err.path || err.param] = err.msg;\n            });\n            throw { fieldErrors };\n        }\n        throw new Error(error.response?.data?.error || 'Failed to request password reset');\n    }\n};\n\nexport const resetPassword = async (token: string, newPassword: string): Promise<{ message: string }> => {\n    try {\n        const response = await api.post<{ message: string }>('/auth/reset-password', { token, newPassword });\n        return response.data;\n    } catch (error: any) {\n        if (error.response?.data?.errors) {\n            const fieldErrors: Record<string, string> = {};\n            error.response.data.errors.forEach((err: any) => {\n                fieldErrors[err.path || err.param] = err.msg;\n            });\n            throw { fieldErrors };\n        }\n        throw new Error(error.response?.data?.error || 'Failed to reset password');\n    }\n};\n\n// Verify Email\nexport const verifyEmail = async (token: string): Promise<VerifyEmailResponse> => {\n    try {\n        const response = await api.get<VerifyEmailResponse>(`/auth/verify-email?token=${token}`);\n        return response.data; // Typed as VerifyEmailResponse\n    } catch (error: any) {\n        throw new Error(error.response?.data?.error || 'Email verification failed');\n    }\n};\n\n// Get Current User\nexport const getCurrentUser = async (token: string): Promise<UserResponse> => {\n    try {\n        const response = await api.get<UserResponse>('/users/me', {\n            headers: {Authorization: `Bearer ${token}`},\n        });\n        return response.data;\n    } catch (error: any) {\n        throw new Error(error.response?.data?.error || 'Failed to fetch user');\n    }\n};\n\nexport const requestVerification = async (): Promise<{ message: string }> => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await api.post<{ message: string }>('/auth/request-verification', {}, {\n            headers: {Authorization: `Bearer ${token}`},\n        });\n        return response.data;\n    } catch (error: any) {\n        throw new Error(error.response?.data?.error || 'Failed to request verification');\n    }\n};\n\nexport const approveVerification = async (userId: string): Promise<{ message: string }> => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await api.post<{ message: string }>('/auth/approve-verification', {userId}, {\n            headers: {Authorization: `Bearer ${token}`},\n        });\n        return response.data;\n    } catch (error: any) {\n        throw new Error(error.response?.data?.error || 'Failed to approve verification');\n    }\n};"],"names":[],"mappings":"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"}},
    {"offset": {"line": 303, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file:///app/app/forgot-password/page.tsx"],"sourcesContent":["'use client';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport { requestPasswordReset, resetPassword } from '@/services/auth';\nimport Link from 'next/link';\nimport {\n    CheckCircleIcon,\n    EnvelopeIcon,\n    EyeIcon,\n    EyeSlashIcon,\n    LockClosedIcon,\n    XCircleIcon,\n    XMarkIcon\n} from '@heroicons/react/24/outline';\n\nexport default function ForgotPasswordPage() {\n    const searchParams = useSearchParams();\n    const token = searchParams.get('token');\n\n    const [email, setEmail] = useState<string>('');\n    const [newPassword, setNewPassword] = useState<string>('');\n    const [confirmPassword, setConfirmPassword] = useState<string>('');\n    const [showPassword, setShowPassword] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const [errors, setErrors] = useState<Record<string, string>>({});\n    const [fieldErrorVisibility, setFieldErrorVisibility] = useState<Record<string, boolean>>({});\n    const [error, setError] = useState<string>('');\n    const [message, setMessage] = useState<string>('');\n    const [isExitingError, setIsExitingError] = useState(false);\n    const [isExitingMessage, setIsExitingMessage] = useState(false);\n\n    // Validation for request reset form\n    const validateRequestForm = () => {\n        const newErrors: Record<string, string> = {};\n        if (!email) newErrors.email = 'Email is required';\n        else if (!/\\S+@\\S+\\.\\S+/.test(email)) newErrors.email = 'Email is invalid';\n\n        if (Object.keys(newErrors).length > 0) {\n            setErrors(newErrors);\n            const visibility: Record<string, boolean> = {};\n            Object.keys(newErrors).forEach((field) => {\n                visibility[field] = true;\n                setTimeout(() => {\n                    setFieldErrorVisibility((prev) => ({ ...prev, [field]: false }));\n                    setTimeout(() => {\n                        setErrors((prev) => {\n                            const updatedErrors = { ...prev };\n                            delete updatedErrors[field];\n                            return updatedErrors;\n                        });\n                    }, 500);\n                }, 3000);\n            });\n            setFieldErrorVisibility(visibility);\n        }\n        return Object.keys(newErrors).length === 0;\n    };\n\n    // Validation for reset password form\n    const validateResetForm = () => {\n        const newErrors: Record<string, string> = {};\n        if (!newPassword) newErrors.newPassword = 'Password is required';\n        else if (newPassword.length < 6) newErrors.newPassword = 'Password must be at least 6 characters';\n        if (!confirmPassword) newErrors.confirmPassword = 'Confirm Password is required';\n        else if (newPassword !== confirmPassword) newErrors.confirmPassword = 'Passwords do not match';\n\n        if (Object.keys(newErrors).length > 0) {\n            setErrors(newErrors);\n            const visibility: Record<string, boolean> = {};\n            Object.keys(newErrors).forEach((field) => {\n                visibility[field] = true;\n                setTimeout(() => {\n                    setFieldErrorVisibility((prev) => ({ ...prev, [field]: false }));\n                    setTimeout(() => {\n                        setErrors((prev) => {\n                            const updatedErrors = { ...prev };\n                            delete updatedErrors[field];\n                            return updatedErrors;\n                        });\n                    }, 500);\n                }, 3000);\n            });\n            setFieldErrorVisibility(visibility);\n        }\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleRequestReset = async (e: React.FormEvent) => {\n        e.preventDefault();\n        if (!validateRequestForm()) return;\n\n        setError('');\n        setMessage('');\n        setFieldErrorVisibility({});\n        setLoading(true);\n\n        try {\n            const data = await requestPasswordReset(email);\n            setMessage(data.message || 'Password reset email sent! Check your inbox.');\n        } catch (err: any) {\n            if (err.fieldErrors) {\n                setErrors(err.fieldErrors);\n                const visibility: Record<string, boolean> = {};\n                Object.keys(err.fieldErrors).forEach((field) => {\n                    visibility[field] = true;\n                    setTimeout(() => {\n                        setFieldErrorVisibility((prev) => ({ ...prev, [field]: false }));\n                        setTimeout(() => {\n                            setErrors((prev) => {\n                                const newErrors = { ...prev };\n                                delete newErrors[field];\n                                return newErrors;\n                            });\n                        }, 500);\n                    }, 3000);\n                });\n                setFieldErrorVisibility(visibility);\n            } else {\n                setError(err.message || 'Failed to request password reset');\n            }\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleResetPassword = async (e: React.FormEvent) => {\n        e.preventDefault();\n        if (!validateResetForm() || !token) return;\n\n        setError('');\n        setMessage('');\n        setFieldErrorVisibility({});\n        setLoading(true);\n\n        try {\n            const data = await resetPassword(token, newPassword);\n            setMessage(data.message || 'Password reset successful! Redirecting to login...');\n            setTimeout(() => window.location.href = '/login', 2000);\n        } catch (err: any) {\n            if (err.fieldErrors) {\n                setErrors(err.fieldErrors);\n                const visibility: Record<string, boolean> = {};\n                Object.keys(err.fieldErrors).forEach((field) => {\n                    visibility[field] = true;\n                    setTimeout(() => {\n                        setFieldErrorVisibility((prev) => ({ ...prev, [field]: false }));\n                        setTimeout(() => {\n                            setErrors((prev) => {\n                                const newErrors = { ...prev };\n                                delete newErrors[field];\n                                return newErrors;\n                            });\n                        }, 500);\n                    }, 3000);\n                });\n                setFieldErrorVisibility(visibility);\n            } else {\n                setError(err.message || 'Failed to reset password');\n            }\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const dismissFieldError = (field: string) => {\n        setFieldErrorVisibility((prev) => ({ ...prev, [field]: false }));\n        setTimeout(() => {\n            setErrors((prev) => {\n                const newErrors = { ...prev };\n                delete newErrors[field];\n                return newErrors;\n            });\n        }, 500);\n    };\n\n    useEffect(() => {\n        if (error && !isExitingError) {\n            const timer = setTimeout(() => {\n                setIsExitingError(true);\n                setTimeout(() => setError(''), 500);\n            }, 3000);\n            return () => clearTimeout(timer);\n        }\n    }, [error, isExitingError]);\n\n    useEffect(() => {\n        if (message && !isExitingMessage) {\n            const timer = setTimeout(() => {\n                setIsExitingMessage(true);\n                setTimeout(() => setMessage(''), 500);\n            }, 3000);\n            return () => clearTimeout(timer);\n        }\n    }, [message, isExitingMessage]);\n\n    return (\n        <div className=\"min-h-screen bg-gray-100 dark:bg-gray-900 flex items-center justify-center\">\n            <div className=\"bg-gray-50 dark:bg-gray-800 p-8 rounded-lg text-center animate-fadeIn max-w-md w-full mx-4 my-8\">\n                <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100 mb-6 flex items-center justify-center\">\n                    <LockClosedIcon className=\"h-6 w-6 mr-2 text-gray-400\" />\n                    {token ? 'Reset Password' : 'Forgot Password'}\n                </h1>\n\n                {!token ? (\n                    <form onSubmit={handleRequestReset} className=\"space-y-4\" noValidate>\n                        {/* Email Field */}\n                        <div className=\"space-y-1\">\n                            <label htmlFor=\"email\" className=\"sr-only\">Email</label>\n                            <div className=\"relative\">\n                                <EnvelopeIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400 pointer-events-none\" />\n                                <input\n                                    id=\"email\"\n                                    type=\"email\"\n                                    value={email}\n                                    onChange={(e) => setEmail(e.target.value)}\n                                    placeholder=\"Email\"\n                                    className=\"w-full pl-10 p-3 bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-slate-600 dark:focus:ring-slate-500 transition duration-200\"\n                                    aria-describedby=\"email-error\"\n                                />\n                            </div>\n                            {errors.email && (\n                                <p id=\"email-error\" className={`min-h-[18px] text-sm text-red-500 transition-opacity duration-300 ease-in-out flex items-center ${fieldErrorVisibility.email ? 'opacity-100 animate-fadeInShort' : 'opacity-0'}`}>\n                                    {errors.email}\n                                    <button onClick={() => dismissFieldError('email')} className=\"ml-2\">\n                                        <XMarkIcon className=\"h-4 w-4 text-red-500\" />\n                                    </button>\n                                </p>\n                            )}\n                        </div>\n\n                        <button\n                            type=\"submit\"\n                            disabled={loading}\n                            className={`w-full bg-slate-600 dark:bg-slate-500 text-white dark:text-gray-900 p-3 rounded-md hover:bg-slate-500 dark:hover:bg-slate-400 transition duration-200 flex items-center justify-center ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}\n                        >\n                            {loading ? (\n                                <svg className=\"animate-spin h-5 w-5 mr-2 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                                </svg>\n                            ) : null}\n                            Send Reset Link\n                        </button>\n                    </form>\n                ) : (\n                    <form onSubmit={handleResetPassword} className=\"space-y-4\" noValidate>\n                        {/* New Password Field */}\n                        <div className=\"space-y-1\">\n                            <label htmlFor=\"newPassword\" className=\"sr-only\">New Password</label>\n                            <div className=\"relative\">\n                                <LockClosedIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400 pointer-events-none\" />\n                                <input\n                                    id=\"newPassword\"\n                                    type={showPassword ? 'text' : 'password'}\n                                    value={newPassword}\n                                    onChange={(e) => setNewPassword(e.target.value)}\n                                    placeholder=\"New Password\"\n                                    className=\"w-full pl-10 pr-10 p-3 bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-slate-600 dark:focus:ring-slate-500 transition duration-200\"\n                                    aria-describedby=\"newPassword-error\"\n                                />\n                                <button\n                                    type=\"button\"\n                                    onClick={() => setShowPassword(!showPassword)}\n                                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\n                                >\n                                    {showPassword ? <EyeSlashIcon className=\"h-5 w-5\" /> : <EyeIcon className=\"h-5 w-5\" />}\n                                </button>\n                            </div>\n                            {errors.newPassword && (\n                                <p id=\"newPassword-error\" className={`min-h-[18px] text-sm text-red-500 transition-opacity duration-300 ease-in-out flex items-center ${fieldErrorVisibility.newPassword ? 'opacity-100 animate-fadeInShort' : 'opacity-0'}`}>\n                                    {errors.newPassword}\n                                    <button onClick={() => dismissFieldError('newPassword')} className=\"ml-2\">\n                                        <XMarkIcon className=\"h-4 w-4 text-red-500\" />\n                                    </button>\n                                </p>\n                            )}\n                        </div>\n\n                        {/* Confirm Password Field */}\n                        <div className=\"space-y-1\">\n                            <label htmlFor=\"confirmPassword\" className=\"sr-only\">Confirm Password</label>\n                            <div className=\"relative\">\n                                <LockClosedIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400 pointer-events-none\" />\n                                <input\n                                    id=\"confirmPassword\"\n                                    type={showPassword ? 'text' : 'password'}\n                                    value={confirmPassword}\n                                    onChange={(e) => setConfirmPassword(e.target.value)}\n                                    placeholder=\"Confirm Password\"\n                                    className=\"w-full pl-10 pr-10 p-3 bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-slate-600 dark:focus:ring-slate-500 transition duration-200\"\n                                    aria-describedby=\"confirmPassword-error\"\n                                />\n                                <button\n                                    type=\"button\"\n                                    onClick={() => setShowPassword(!showPassword)}\n                                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\n                                >\n                                    {showPassword ? <EyeSlashIcon className=\"h-5 w-5\" /> : <EyeIcon className=\"h-5 w-5\" />}\n                                </button>\n                            </div>\n                            {errors.confirmPassword && (\n                                <p id=\"confirmPassword-error\" className={`min-h-[18px] text-sm text-red-500 transition-opacity duration-300 ease-in-out flex items-center ${fieldErrorVisibility.confirmPassword ? 'opacity-100 animate-fadeInShort' : 'opacity-0'}`}>\n                                    {errors.confirmPassword}\n                                    <button onClick={() => dismissFieldError('confirmPassword')} className=\"ml-2\">\n                                        <XMarkIcon className=\"h-4 w-4 text-red-500\" />\n                                    </button>\n                                </p>\n                            )}\n                        </div>\n\n                        <button\n                            type=\"submit\"\n                            disabled={loading}\n                            className={`w-full bg-slate-600 dark:bg-slate-500 text-white dark:text-gray-900 p-3 rounded-md hover:bg-slate-500 dark:hover:bg-slate-400 transition duration-200 flex items-center justify-center ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}\n                        >\n                            {loading ? (\n                                <svg className=\"animate-spin h-5 w-5 mr-2 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                                </svg>\n                            ) : null}\n                            Reset Password\n                        </button>\n                    </form>\n                )}\n\n                {error && (\n                    <p className={`bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 text-sm p-2 rounded-md animate-fadeInShort flex items-center transition-opacity duration-500 ${isExitingError ? 'opacity-0' : 'opacity-100'}`}>\n                        <XCircleIcon className=\"h-5 w-5 mr-2 text-red-800 dark:text-red-200\" />\n                        {error}\n                        <button onClick={() => setError('')} className=\"ml-auto\">\n                            <XMarkIcon className=\"h-5 w-5 text-red-800 dark:text-red-200\" />\n                        </button>\n                    </p>\n                )}\n                {message && (\n                    <p className={`bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 text-sm p-2 rounded-md animate-fadeInShort flex items-center transition-opacity duration-500 ${isExitingMessage ? 'opacity-0' : 'opacity-100'}`}>\n                        <CheckCircleIcon className=\"h-5 w-5 mr-2 text-green-800 dark:text-green-200\" />\n                        {message}\n                        <button onClick={() => setMessage('')} className=\"ml-auto\">\n                            <XMarkIcon className=\"h-5 w-5 text-green-800 dark:text-green-200\" />\n                        </button>\n                    </p>\n                )}\n\n                <p className=\"mt-4 text-sm text-gray-900 dark:text-gray-100\">\n                    Back to{' '}\n                    <Link href=\"/login\" className=\"text-slate-600 dark:text-slate-500 hover:text-slate-400 dark:hover:text-slate-300 hover:underline transition duration-200\">\n                        Login\n                    </Link>\n                </p>\n            </div>\n        </div>\n    );\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1019, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}